version: "3.8"

services:
  # База данных PostgreSQL для общего использования
  postgres:
    container_name: postgres
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-voku}
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - app-network
    restart: unless-stopped

  # База данных PostgreSQL для аутентификации
  auth-postgres:
    container_name: auth-postgres
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${AUTH_POSTGRES_USER:-auth_user}
      POSTGRES_PASSWORD: ${AUTH_POSTGRES_PASSWORD:-auth_password}
      POSTGRES_DB: ${AUTH_POSTGRES_DB:-auth_db}
      PGDATA: /data/auth-postgres
    volumes:
      - auth-postgres:/data/auth-postgres
    ports:
      - "5433:5432"
    networks:
      - app-network
    restart: unless-stopped

  # pgAdmin для управления базой данных
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@admin.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - app-network
    restart: unless-stopped

  # Бэкенд (NestJS)
  backend:
    container_name: backend
    build:
      context: ./server
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-voku}?schema=public
      - NODE_ENV=development
      - PORT=3000
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    ports:
      - "3000:3000"
    depends_on:
      - postgres
    networks:
      - app-network
    volumes:
      - ./server:/usr/src/app
    restart: unless-stopped

  # аутентификациия
  auth-service:
    container_name: auth-service
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    ports:
      - "3001:3000"
    environment:
      - DATABASE_URL=postgresql://${AUTH_POSTGRES_USER:-auth_user}:${AUTH_POSTGRES_PASSWORD:-auth_password}@auth-postgres:5432/${AUTH_POSTGRES_DB:-auth_db}?schema=public
    depends_on:
      - auth-postgres
    volumes:
      - ./auth-service:/usr/src/app
    networks:
      - app-network

  # Фронтенд (React + Vite)
  frontend:
    container_name: frontend
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    volumes:
      - ./client:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - app-network
    depends_on:
      - backend
    restart: unless-stopped

  # аутентификациия
  auth-service:
    container_name: auth-service
    build:
      context: ./auth-service
    ports:
      - "3001:3000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-voku}?schema=public
    depends_on:
      - postgres
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres:
  auth-postgres:
  pgadmin:
